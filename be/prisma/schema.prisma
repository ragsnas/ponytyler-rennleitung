// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./rl.db"
}

model Show {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  date            DateTime?
  actualStartTime DateTime?
  duration        Int?
  finished        Boolean   @default(false)
  active          Boolean   @default(false)
  races           Race[]    @relation(name: "ShowToRace")
  shifts          Shift[]   @relation(name: "ShowToShift")
}

model Shift {
  id            Int         @id @default(autoincrement())
  show          Show        @relation(name: "ShowToShift", fields: [showId], references: [id])
  showId        Int
  order         Int
  duration      Int?
  shiftStarted  DateTime?
  shiftFinished DateTime?
  shiftRoles    ShiftRole[] @relation(name: "ShiftToShiftRole")
}

model ShiftRole {
  id         Int    @id @default(autoincrement())
  shift      Shift  @relation(name: "ShiftToShiftRole", fields: [shiftId], references: [id])
  shiftId    Int
  roleTitle  String
  crewMember String
}

model Song {
  id              Int     @id @default(autoincrement())
  name            String
  artist          String
  selectable      Boolean @default(true)
  deleted         Boolean @default(false)
  origin          String  @default("FROM_FILE_SYNC")
  pickedByPerson1 Race[]  @relation(name: "SongForPerson1")
  pickedByPerson2 Race[]  @relation(name: "SongForPerson2")
}

model Race {
  id          Int      @id @default(autoincrement())
  show        Show     @relation(name: "ShowToRace", fields: [showId], references: [id])
  showId      Int
  orderNumber Int
  createdAt   DateTime
  raced       Boolean  @default(false)
  raceState   String   @default("WAITING_TO_RACE")
  person1     String?
  song1       Song?    @relation(name: "SongForPerson1", fields: [song1Id], references: [id])
  song1Id     Int?
  person2     String?
  song2       Song?    @relation(name: "SongForPerson2", fields: [song2Id], references: [id])
  song2Id     Int?
  bikeWon     Int      @default(0)
}

model User {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  password    String
  permissions PermissionsToUser[]
}

model Permission {
  id    Int                 @id @default(autoincrement())
  name  String
  posts PermissionsToUser[]
}

model PermissionsToUser {
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int

  @@id([permissionId, userId])
}
